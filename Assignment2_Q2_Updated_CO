#Group Assignment 2
#DAN/EXT 05 - Group 20
#Question 2
#Carlos Galli S365408
#Lauren Whitford S373432
#Cody Old S392352



#import pandas
#csvFile = pandas.read_csv('/content/stations_group_1986.csv')
#print(csvFile)

import os
import pandas as pd
import glob
import os
import re

##############################
#Join all the data together in one big bucket

csv_files = glob.glob('/content/temperatures/*.csv')  #ignore the year at the end

combine_df = pd.DataFrame()

for csv_file in csv_files:
    filename = os.path.basename(csv_file)   #get the file name
    print(filename)
##############################
#find the year in file name and place in new colum for each data block

    pattern = r'\d{4}'
    match = re.search(pattern, filename)
    if match:
        year = match.group()
    else:
        year = None
    print(year)

    df = pd.read_csv(csv_file)  #read and store the the csv file to add the year column
    df["Year"] = year   # place each year in the "YEAR" column
    combine_df = pd.concat([combine_df, df], ignore_index = True) #add to combined DataFrame

combine_df = combine_df.sort_values(by = "Year").reset_index(drop=True)

combine_df.to_csv("/content/output.csv", index = False)
print("saved to output.csv")

#sort by year
combine_df = combine_df.sort_values(by="Year").reset_index(drop=True)

################################
#seasonal avg for all stations and years

seasonal_avg = pd.DataFrame()
seasonal_avg["Year"] = combine_df["Year"]

summer_values = pd.concat([combine_df['December'], combine_df['January'], combine_df['February']])
summer_avg = summer_values.mean().round(1)

autumn_values = pd.concat([combine_df['March'], combine_df['April'], combine_df['May']])
autumn_avg = autumn_values.mean().round(1)

winter_values = pd.concat([combine_df['June'], combine_df['July'], combine_df['August']])
winter_avg = winter_values.mean().round(1)

spring_values = pd.concat([combine_df['September'], combine_df['October'], combine_df['November']])
spring_avg = spring_values.mean().round(1)


print(f"Summer: {summer_avg}°C\n")  #debug
print(f"Autumn: {autumn_avg}°C\n")  #debug
print(f"Winter: {winter_avg}°C\n")  #debug
print(f"Spring: {spring_avg}°C\n")  #debug

with open('/content/average_temp.txt', 'w') as f:   #save avg's to .txt as requested by Q1
    f.write(f"Summer: {summer_avg}°C\n")
    f.write(f"Autumn: {autumn_avg}°C\n")
    f.write(f"Winter: {winter_avg}°C\n")
    f.write(f"Spring: {spring_avg}°C\n")

################################
# Temperature Range: Largest range per station

# List of month columns in your data
month_cols = ['January','February','March','April','May','June',
              'July','August','September','October','November','December']

# Group by station and find overall max and min across all months
station_max = combine_df.groupby('STATION_NAME')[month_cols].max().max(axis=1)
station_min = combine_df.groupby('STATION_NAME')[month_cols].min().min(axis=1)

# Calculate range
station_range = station_max - station_min

# Find the largest range value
max_range_value = station_range.max()

# Get all stations with that range
largest_range_stations = station_range[station_range == max_range_value].index #This includes any ties

# Save results to file
with open('/content/largest_temp_range_station.txt', 'w') as f:
    for station in largest_range_stations:
        f.write(f"{station}: Range {max_range_value:.1f}°C "
                f"(Max: {station_max[station]:.1f}°C, Min: {station_min[station]:.1f}°C)\n")

print("Saved largest temperature range results to largest_temp_range_station.txt")
